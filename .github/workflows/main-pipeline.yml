name: Image CICD

# This workflow pipeline will be triggered on a PR push
on:
  workflow_dispatch:
  push:

# Local environment variables
env:
  CONTAINER_REGISTRY: docker.io
  IMAGE_NAME: github-actions-nginx

# jobs that create the CICD pipeline
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

        # Checkout (pull) this repository from the runners
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Build

        # demonstrates the use of local environment variables as env.<env-variable> or $<env-variable>
        # demonstrates the use of repository based environment variables as var.<repo-env-variable>
        run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

        # demonstrates the use of repository based secret environment variables
      - name: Docker Login
        run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Publish
        run: echo docker push ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

  deploy:
    # specify max running time for all steps
    timeout-minutes: 5

    # ensures the docker job is run before it
    needs: docker

    # cancels previous running deployment of this job if a new job is triggered in a new pipeline
    # docker-deployment is an arbitrary name 
    concurrency:
      group: docker-deployment
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Docker Run

        # specify max running time for this steps
        timeout-minutes: 1
        run: |
          echo docker run -d -p 8080:80 ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

  deploy_packages:
    strategy:
      # If one step fails, don't fail the entire pipeline
      fail-fast: false

      # max 2 steps to be run at any given time
      max-parallel: 2

      # matrix configuration: allow you to run a number of steps repeatedly in one code block
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, windows-latest]
        packages: [hello-world, alpine]
        exlude:
          - packages: alpine
            os: windows-latest
        include:
          - packages: amd64/alpine
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Echo Docker details
        run: docker info
      
      - name: Run Image on ${{ matrix.os }}
        run: docker run ${{ matrix.packages }}
